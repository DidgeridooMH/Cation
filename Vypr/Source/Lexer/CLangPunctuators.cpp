#include "Vypr/Lexer/CLangTokenMap.hpp"

namespace Vypr
{
  const CLangTokenMap PunctuatorMap = {
    {L"[", CLangTokenType::LeftBracket},
    {L"]", CLangTokenType::RightBracket},
    {L"(", CLangTokenType::LeftParenthesis},
    {L")", CLangTokenType::RightParenthesis},
    {L"{", CLangTokenType::LeftDragon},
    {L"}", CLangTokenType::RightDragon},
    {L".", CLangTokenType::Period},
    {L"->", CLangTokenType::Arrow},
    {L"++", CLangTokenType::Increment},
    {L"--", CLangTokenType::Decrement},
    {L"*", CLangTokenType::Star},
    {L"+", CLangTokenType::Add},
    {L"-", CLangTokenType::Subtract},
    {L"~", CLangTokenType::Tilde},
    {L"!", CLangTokenType::Exclamation},
    {L"/", CLangTokenType::Divide},
    {L"%", CLangTokenType::Modulo},
    {L"<<", CLangTokenType::ShiftLeft},
    {L">>", CLangTokenType::ShiftRight},
    {L"<", CLangTokenType::LessThan},
    {L">", CLangTokenType::GreaterThan},
    {L"<=", CLangTokenType::LessEqual},
    {L">=", CLangTokenType::GreaterEqual},
    {L"==", CLangTokenType::Equal},
    {L"!=", CLangTokenType::NotEqual},
    {L"&", CLangTokenType::And},
    {L"|", CLangTokenType::Or},
    {L"^", CLangTokenType::Xor},
    {L"&&", CLangTokenType::LogicalAnd},
    {L"||", CLangTokenType::LogicalOr},
    {L"?", CLangTokenType::TernaryProposition},
    {L":", CLangTokenType::TernaryDecision},
    {L";", CLangTokenType::StatementDelimiter},
    {L"...", CLangTokenType::Variadic},
    {L"=", CLangTokenType::Assign},
    {L"*=", CLangTokenType::MultiplyAssign},
    {L"/=", CLangTokenType::DivideAssign},
    {L"%=", CLangTokenType::ModuloAssign},
    {L"+=", CLangTokenType::AddAssign},
    {L"-=", CLangTokenType::SubtractAssign},
    {L"<<=", CLangTokenType::LeftShiftAssign},
    {L">>=", CLangTokenType::RightShiftAssign},
    {L"&=", CLangTokenType::AndAssign},
    {L"^=", CLangTokenType::XorAssign},
    {L"|=", CLangTokenType::OrAssign},
    {L",", CLangTokenType::Comma},
    {L"#", CLangTokenType::Preprocessor},
    {L"##", CLangTokenType::PreprocessorConcat}
  };
}
